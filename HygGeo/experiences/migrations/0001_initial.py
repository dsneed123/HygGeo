# Generated by Django 5.2 on 2025-08-21 23:50

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('slug', models.SlugField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('icon', models.CharField(default='fas fa-map-marker-alt', help_text='FontAwesome icon class', max_length=50)),
                ('color', models.CharField(default='#2d5a3d', help_text='Hex color code', max_length=7)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name_plural': 'Categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Destination',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('slug', models.SlugField(max_length=200, unique=True)),
                ('country', models.CharField(max_length=100)),
                ('region', models.CharField(blank=True, max_length=100)),
                ('description', models.TextField()),
                ('latitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('climate', models.CharField(blank=True, max_length=100)),
                ('best_time_to_visit', models.CharField(blank=True, max_length=200)),
                ('sustainability_score', models.IntegerField(default=5, help_text='Sustainability rating from 1-10', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('hygge_factor', models.IntegerField(default=5, help_text='How well this destination embodies hygge principles (1-10)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('image', models.ImageField(blank=True, null=True, upload_to='destinations/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Provider',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('slug', models.SlugField(max_length=200, unique=True)),
                ('description', models.TextField()),
                ('website', models.URLField()),
                ('contact_email', models.EmailField(blank=True, max_length=254)),
                ('phone', models.CharField(blank=True, max_length=20)),
                ('sustainability_certifications', models.TextField(blank=True, help_text='List any eco-certifications')),
                ('verified', models.BooleanField(default=False, help_text='Verified as sustainable by HygGeo team')),
                ('logo', models.ImageField(blank=True, null=True, upload_to='providers/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Experience',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('slug', models.SlugField(max_length=200, unique=True)),
                ('description', models.TextField()),
                ('short_description', models.CharField(help_text='Brief description for cards', max_length=300)),
                ('experience_type', models.CharField(choices=[('accommodation', 'Accommodation'), ('activity', 'Activity'), ('tour', 'Tour'), ('transport', 'Transportation'), ('food', 'Food & Dining'), ('wellness', 'Wellness & Spa'), ('cultural', 'Cultural Experience'), ('adventure', 'Adventure'), ('volunteering', 'Volunteer Tourism')], max_length=20)),
                ('budget_range', models.CharField(choices=[('budget', 'Budget ($0-50/day)'), ('mid_range', 'Mid-range ($50-150/day)'), ('luxury', 'Luxury ($150+/day)')], max_length=20)),
                ('group_size', models.CharField(choices=[('solo', 'Solo Friendly'), ('couple', 'Perfect for Couples'), ('small_group', 'Small Groups (3-5)'), ('large_group', 'Large Groups (6+)'), ('family', 'Family Friendly')], max_length=20)),
                ('duration', models.CharField(choices=[('half_day', 'Half Day'), ('full_day', 'Full Day'), ('weekend', 'Weekend (2-3 days)'), ('short_trip', 'Short Trip (4-7 days)'), ('long_trip', 'Extended Trip (1+ weeks)')], max_length=20)),
                ('price_from', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('price_to', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('currency', models.CharField(default='USD', max_length=3)),
                ('sustainability_score', models.IntegerField(default=5, help_text='Sustainability rating from 1-10', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('hygge_factor', models.IntegerField(default=5, help_text='How well this experience embodies hygge principles (1-10)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('carbon_neutral', models.BooleanField(default=False)),
                ('supports_local_community', models.BooleanField(default=False)),
                ('travel_styles', models.JSONField(default=list, help_text='Travel styles this experience matches (adventure, cultural, etc.)')),
                ('accommodation_types', models.JSONField(default=list, help_text='Accommodation types (eco_hotels, hostels, etc.)')),
                ('transport_types', models.JSONField(default=list, help_text='Transportation types (walking, cycling, train, etc.)')),
                ('sustainability_factors', models.JSONField(default=list, help_text='Sustainability factors (carbon_offset, local_economy, etc.)')),
                ('main_image', models.ImageField(blank=True, null=True, upload_to='experiences/')),
                ('gallery_images', models.JSONField(blank=True, default=list, help_text='List of image URLs')),
                ('affiliate_link', models.URLField(help_text='Affiliate tracking link for bookings')),
                ('booking_link', models.URLField(blank=True, help_text='Direct booking link (optional)')),
                ('commission_rate', models.DecimalField(blank=True, decimal_places=2, help_text='Commission percentage for affiliate sales', max_digits=5, null=True)),
                ('included_features', models.JSONField(default=list, help_text="What's included in the experience")),
                ('requirements', models.TextField(blank=True, help_text='Requirements or restrictions')),
                ('what_to_bring', models.TextField(blank=True, help_text='What participants should bring')),
                ('meta_title', models.CharField(blank=True, max_length=60)),
                ('meta_description', models.CharField(blank=True, max_length=160)),
                ('is_featured', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('admin_notes', models.TextField(blank=True, help_text='Internal notes for admin')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('categories', models.ManyToManyField(related_name='experiences', to='experiences.category')),
                ('destination', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='experiences', to='experiences.destination')),
                ('provider', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='experiences', to='experiences.provider')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='BookingTracking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_id', models.CharField(help_text='Anonymous session tracking', max_length=100)),
                ('clicked_at', models.DateTimeField(auto_now_add=True)),
                ('converted', models.BooleanField(default=False)),
                ('conversion_date', models.DateTimeField(blank=True, null=True)),
                ('commission_earned', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('experience', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='experiences.experience')),
            ],
            options={
                'ordering': ['-clicked_at'],
            },
        ),
        migrations.CreateModel(
            name='ExperienceReview',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('sustainability_rating', models.IntegerField(help_text='How sustainable was this experience?', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('hygge_rating', models.IntegerField(help_text='How well did this embody hygge principles?', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('title', models.CharField(max_length=200)),
                ('content', models.TextField()),
                ('would_recommend', models.BooleanField(default=True)),
                ('verified_booking', models.BooleanField(default=False, help_text='User booked through HygGeo')),
                ('helpful_votes', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('experience', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='experiences.experience')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
                'unique_together': {('experience', 'user')},
            },
        ),
        migrations.CreateModel(
            name='UserRecommendation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('match_score', models.DecimalField(decimal_places=2, help_text='Algorithm-generated match score (0-100)', max_digits=5)),
                ('reasons', models.JSONField(default=list, help_text='List of reasons why this was recommended')),
                ('viewed', models.BooleanField(default=False)),
                ('clicked', models.BooleanField(default=False)),
                ('bookmarked', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('experience', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='experiences.experience')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recommendations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-match_score', '-created_at'],
                'unique_together': {('user', 'experience')},
            },
        ),
    ]
